cluster:
  domain: {{ .Requirements.ingress.domain }}
{{- if hasKey .Requirements.ingress "exposer" }}
  exposer: {{ .Requirements.ingress.exposer }}
{{- else if eq .Requirements.cluster.provider "openshift" }}
  exposer: Route
{{- else if eq .Requirements.cluster.provider "minishift" }}
  exposer: Route
{{- else }}
  exposer: Ingress
{{- end }}
  namespace: {{ .Requirements.cluster.namespace | default "jx" }}
  namespaceSubDomain: {{ .Requirements.ingress.namespaceSubDomain | default ".jx." }}
{{- if hasKey .Requirements.cluster "project" }}
  projectID: {{ .Requirements.cluster.project }}
{{- else }}
  projectID: ""
{{- end }}
{{- if hasKey .Requirements.cluster "zone" }}
  zone:  {{ .Requirements.cluster.zone }}
{{- else }}
  zone: ""
{{- end }}
  name: ""
{{- if hasKey .Requirements.cluster "provider" }}
  provider:  {{ .Requirements.cluster.provider }}
{{- end }}
{{- if hasKey .Requirements.cluster "strictPermissions" }}
  strictPermissions: {{ .Requirements.cluster.strictPermissions }}
{{- end }}
  serverUrl: ""
{{- if .Requirements.ingress.tls.enabled }}
  tls: true
{{- else }}
  tls: false
{{- end }}

gitops:
  versionStreamUrl: {{ .Requirements.versionStream.url }}
  versionStreamRef: {{ .Requirements.versionStream.ref }}

  gitKind: {{ .Requirements.cluster.gitKind | default "github" }}
  gitName: {{ .Requirements.cluster.gitName | default "github" }}
{{- if hasKey .Requirements.cluster "gitPublic" }}
  gitPublic: {{ .Requirements.cluster.gitPublic }}
{{- end }}
  server: {{ .Requirements.cluster.gitServer | default "https://github.com" }}
  owner: {{ .Requirements.cluster.environmentGitOwner }}
  webhook: {{ .Requirements.webhook | default "prow" | quote }}
{{- if eq .Requirements.cluster.gitKind "bitbucketserver" }}
  gitUrlPathPrefix: "/scm"
{{- else }}
  gitUrlPathPrefix: ""
{{- end }}

  dev:
    server: ""
{{- if .Requirements.gitops }}
    repo: "{{ .Environments.dev.repository }}"
    owner: "{{ .Environments.dev.owner }}"
    envOrganisation: "{{ .Requirements.cluster.environmentGitOwner }}"
{{- else }}
    repo: ""
    owner: ""
    envOrganisation: ""
{{- end }}
{{- if eq .Requirements.cluster.provider "gke" }}
    dockerRegistryOrg: "{{ .Requirements.cluster.project }}"
{{- else }}
    dockerRegistryOrg: ""
{{- end }}

{{- if hasKey .Requirements "buildPacks" }}
    buildPackName: "{{ .Requirements.buildPacks.buildPackLibrary.name }}"
    buildPackUrl: "{{ .Requirements.buildPacks.buildPackLibrary.gitURL }}"
    buildPackRef: "{{ .Requirements.buildPacks.buildPackLibrary.gitRef }}"
{{- end }}

  staging:
    repo: "{{ .Environments.staging.repository }}"
    owner: "{{ .Environments.staging.owner | default .Requirements.cluster.environmentGitOwner }}"
    server: ""
    namespace: {{ .Requirements.cluster.namespace | default "jx" }}-staging
{{- if hasKey .Environments.staging "remoteCluster" }}
    remote: {{ .Environments.staging.remoteCluster | default "false" }}
{{- end }}

  production:
    repo: "{{ .Environments.production.repository }}"
    owner: "{{ .Environments.production.owner | default .Requirements.cluster.environmentGitOwner }}"
    server: ""
    namespace: {{ .Requirements.cluster.namespace | default "jx" }}-production
{{- if hasKey .Environments.production "remoteCluster" }}
    remote: {{ .Environments.production.remoteCluster | default "false" }}
{{- end }}

storage:
  logs:
    url: "{{ .Requirements.storage.logs.url }}"
  reports:
    url: "{{ .Requirements.storage.reports.url }}"
  repository:
    url: "{{ .Requirements.storage.repository.url }}"

expose:
  enabled: false

cleanup:
  enabled: false

controllerbuild:
  enabled: true
controllerteam:
  enabled: false
controllerworkflow:
  enabled: false
jenkins:
  enabled: false
jenkins-x-platform:
  chartmuseum:
    enabled: true
    env:
      open:
        AUTH_ANONYMOUS_GET: true
        DISABLE_API: false
#        STORAGE: google
#        STORAGE_GOOGLE_BUCKET: chartmuseum.jenkins-x.io
#        STORAGE_GOOGLE_PREFIX: charts
#    gcp:
#      secret:
#        enabled: true
#        key: gcs-chartmuseum.key.json
#        name: gcs-jenkinsx-chartmuseum
    image:
      tag: v0.7.1
  controllerbuild:
    enabled: true
  jenkins:
    Agent:
      PodTemplates:
        Go:
          Containers:
            Go:
              Image: jenkinsxio/builder-go:latest
        Maven:
          Containers:
            Maven:
              Image: jenkinsxio/builder-maven:latest
          volumes:
          - mountPath: /root/.m2/
            secretName: jenkins-maven-settings
            type: Secret
          - mountPath: /home/jenkins/.docker
            secretName: jenkins-docker-cfg
            type: Secret
        Nodejs:
          Containers:
            Nodejs:
              Image: jenkinsxio/builder-nodejs:latest
  monocular:
    api:
      livenessProbe:
        initialDelaySeconds: 1000
  nexus:
    persistence:
      size: 100Gi
  postinstalljob:
    enabled: "true"

JenkinsXGitHub:
  username: "{{ .Parameters.pipelineUser.username }}"
  email: "{{ .Parameters.pipelineUser.email }}"
  password: "{{ .Parameters.pipelineUser.token }}"

{{- if .Requirements.ingress.tls }}
certmanager:
  production: "{{ .Requirements.ingress.tls.production }}"
{{- if .Requirements.ingress.tls.enabled }}
  email:  "{{ .Requirements.ingress.tls.email }}"
{{- else }}
  enabled: false
{{- end }}
{{- end }}

lighthouse:
{{- if eq .Requirements.webhook "lighthouse" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}

nexus:
{{- if eq .Requirements.repository "nexus" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}

prow:
{{- if eq .Requirements.webhook "prow" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}

vault:
{{- if eq .Requirements.secretStorage "vault" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}

{{- if .Requirements.autoUpdate }}
autoUpdate:
  schedule: {{ .Requirements.autoUpdate.schedule | quote }}
  enabled: {{ .Requirements.autoUpdate.enabled }}
{{- end }}

versions:
  builders: {{ versionStream "docker" "gcr.io/jenkinsxio/builder-go" }}

tekton:
{{- if eq .Requirements.webhook "prow" }}
  enabled: true
{{- else if eq .Requirements.webhook "lighthouse" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}
  auth:
    docker:
      username: vault:oss-weasel/creds/tekton-docker:username
      password: vault:oss-weasel/creds/tekton-docker:password # pragma: allowlist secret
      url: https://index.docker.io/v1/
  webhook:
    enabled: false

# Use cert-manager 0.11 CRDs/APIs with Dex
dex:
  certs:
    newApi: true

datadog:
  apiKey: vault:oss-weasel/arcalos/datadog-app:apiKey
  appKey: vault:oss-weasel/arcalos/datadog-app:appKey

JenkinsXBDD: vault:oss-weasel/sa/jenkins-x-bdd:json

JenkinsXGHETestUser:
  username: vault:oss-weasel/creds/jenkins-x-github-ent-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-github-ent-test-user:password # pragma: allowlist secret

JenkinsXGHEApproverTestUser:
  username: vault:oss-weasel/creds/jenkins-x-github-ent-approver-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-github-ent-approver-test-user:password # pragma: allowlist secret

JenkinsXBBSTestUser:
  username: vault:oss-weasel/creds/jenkins-x-bbs-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-bbs-test-user:password # pragma: allowlist secret

JenkinsXBBSApproverTestUser:
  username: vault:oss-weasel/creds/jenkins-x-bbs-approver-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-bbs-approver-test-user:password # pragma: allowlist secret

JenkinsXGitLabTestUser:
  username: vault:oss-weasel/creds/jenkins-x-gitlab-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-gitlab-test-user:password # pragma: allowlist secret

JenkinsXGitLabApproverTestUser:
  username: vault:oss-weasel/creds/jenkins-x-gitlab-approver-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-gitlab-approver-test-user:password # pragma: allowlist secret

JenkinsXVersionsTestUser:
  username: vault:oss-weasel/creds/jenkins-x-versions-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-versions-test-user:password # pragma: allowlist secret

JenkinsXLighthouseTestUser:
  username: vault:oss-weasel/creds/jenkins-x-lighthouse-test-user:username
  password: vault:oss-weasel/creds/jenkins-x-lighthouse-test-user:password # pragma: allowlist secret

TestJenkinsUser:
  username: vault:oss-weasel/creds/test-jenkins-user:username
  password: vault:oss-weasel/creds/test-jenkins-user:password # pragma: allowlist secret

JenkinsXGKEServiceAccount:
  filename: vault:oss-weasel/sa/jenkins-x-sa:filename
  data: vault:oss-weasel/sa/jenkins-x-sa:data

JenkinsXGitHubTest:
  username: vault:oss-weasel/creds/gh-test:username
  password: vault:oss-weasel/creds/gh-test:password # pragma: allowlist secret

GcsJenkinsXChartMuseumKey: vault:oss-weasel/sa/chartmuseum-gcs:data

terraformGoogleJXSA: vault:oss-weasel/sa/terraform-google-jx-sa:json

arcalos:
  adminUsername: vault:oss-weasel/arcalos:admin-username
  dashboardAuthId: vault:oss-weasel/arcalos:dashboard-auth-id
  dashboardAuthSecret: vault:oss-weasel/arcalos:dashboard-auth-secret # pragma: allowlist secret
  domainIssuerPassword: vault:oss-weasel/arcalos:domain-issuer-password # pragma: allowlist secret
  domainIssuerUsername: vault:oss-weasel/arcalos:domain-issuer-username
  pipelineGithubUser: vault:oss-weasel/arcalos:pipeline-github-user
  pipelineGithubToken: vault:oss-weasel/arcalos:pipeline-github-token
  pipelineGithubEmail: vault:oss-weasel/arcalos:pipeline-github-email
  gitOwner: vault:oss-weasel/arcalos:git-owner
  prowHMACToken: vault:oss-weasel/arcalos:prow-hmac-token
  ciSA: vault:oss-weasel/arcalos/sa:json
  arcalosProdSA: vault:oss-weasel/arcalos/arcalos-prod-sa:json
  arcalosBetaPreviewSA: vault:oss-weasel/arcalos/arcalos-beta-preview-sa:json
  segmentWriteKey: vault:oss-weasel/arcalos/segment:write-key

CJXDChartmuseum:
  username: vault:oss-weasel/creds/cb-cjxd-chartmuseum:username
  password: vault:oss-weasel/creds/cb-cjxd-chartmuseum:password

whitesource:
  apiKey: vault:oss-weasel/creds/whitesource:api-key
  userKey: vault:oss-weasel/creds//whitesource:user-key

AWSCreds:
  credentials: vault:oss-weasel/creds/aws_creds:credentials
  account_id: vault:oss-weasel/creds/aws_creds:account_id
  vault_user: vault:oss-weasel/creds/aws_creds:vault_user
